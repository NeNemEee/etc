smart pointer : 포인터처럼 동작하는 class template
- unique_ptr : 객체의 소유권을 갖고 있을 때만, 할당해제 가능, move() 함수를 통해 소유권을 이전시킬 수는 있지만, 복사는 불가능
--make_unique()

- shared_ptr : 하나의 특정 개체를 참조하는 스마트 포인터가 총 몇개인지 참조하는 스마트 포인터
--reset() : 참조해제
--use_count() : 참조된 수
--make_shared()

- weak_ptr : shared_ptr 인스턴스가 소유하는 객체에 접근은 하지만 참조횟수는 늘어나지 않는 스마트 포인터

c++ 에서 동적할당을 해주고 스코프를 벗어나기 전에 항상 할당해제를 해주어야 메모리 누수가 생기지 않는다.

하지만 smart pointer 를 사용하면 스코프를 벗어났을 때 자동으로 할당을 해제해주어 메모리 누수를 방지해준다.